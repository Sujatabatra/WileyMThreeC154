package com.shivendra.sorting;


/*
 * Time Complexity -> O(d*(n + k))
 * d = number of digits in the maximum number
 * k = base of number system
 * 
 * Space Complexity -> O(n + k) or O(n)
 */
public class RadixSort {
	private int []arr;
	private int size;
	RadixSort()
	{
		size = 0;
		arr = null;
	}
	public void setSize(int size)
	{
		this.size = size;
		arr = new int[this.size];
	}
	public int[] getArr()
	{
		return arr;
	}
	public void setData(int index, int num)
	{
		arr[index] = num;
	}
	public int getData(int index)
	{
		return arr[index];
	}
	public void countingSort(int []arr, int size, int pos)
	{
		int opArr[] = new int[size];
		int i;
		int []count = new int[10];
		for(i=0; i<size; i++)
			count[(arr[i] / pos) % 10]++;
		for(i =1; i<10; i++)
			count[i]=count[i]+count[i-1];
		for(i=size-1;i>=0;i--)
			opArr[--count[(arr[i] / pos)%10]]=arr[i];
		for(i = 0; i < size; i ++)
			arr[i] = opArr[i];
	}
	public void radixSort()
	{
		int i;
		int max=arr[0];
		for(i=0;i<size; i++)
			max=Math.max(max, arr[i]);
		for(int pos = 1; max/pos > 0; pos *= 10)
			countingSort(arr, size, pos);
		
	}	
}
